import fastf1
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from datetime import timedelta
import warnings
warnings.filterwarnings('ignore')

# =============================================================================
# Ë®≠ÂÆö
# =============================================================================
def setup_cache():
    """„Ç≠„É£„ÉÉ„Ç∑„É•Ë®≠ÂÆö"""
    try:
        # „Ç≠„É£„ÉÉ„Ç∑„É•„Éá„Ç£„É¨„ÇØ„Éà„É™„ÅÆ„Éë„Çπ„ÇíÊåáÂÆöÔºàÁí∞Â¢É„Å´Âêà„Çè„Åõ„Å¶Â§âÊõ¥Ôºâ
        cache_path = './fastf1_cache'  # Áõ∏ÂØæ„Éë„Çπ‰æã
        # cache_path = '/home/user/fastf1_cache'  # Áµ∂ÂØæ„Éë„Çπ‰æã
        
        fastf1.Cache.enable_cache(cache_path)
        print(f"‚úÖ „Ç≠„É£„ÉÉ„Ç∑„É•ÊúâÂäπ: {cache_path}")
        return True
    except Exception as e:
        print(f"‚ö†Ô∏è  „Ç≠„É£„ÉÉ„Ç∑„É•Ë®≠ÂÆö„Ç®„É©„Éº: {e}")
        return False

# =============================================================================
# „Éá„Éº„ÇøÂèñÂæó
# =============================================================================
def get_session_data(year, event_name, session_type='R', drivers=None):
    """
    „Çª„ÉÉ„Ç∑„Éß„É≥„Éá„Éº„Çø„ÇíÂèñÂæó
    
    Parameters:
    - year: int (‰æã: 2024)
    - event_name: str (‰æã: 'Monaco', 'Silverstone')
    - session_type: str ('R'=Race, 'Q'=Qualifying, 'P1'-'P3'=Practice)
    - drivers: list (‰æã: ['VER', 'NOR', 'PIA'])
    """
    print(f"üîÑ „Çª„ÉÉ„Ç∑„Éß„É≥ÂèñÂæó‰∏≠: {year} {event_name} {session_type}")
    
    try:
        # „Çª„ÉÉ„Ç∑„Éß„É≥ÂèñÂæó
        session = fastf1.get_session(year, event_name, session_type)
        session.load(laps=True, telemetry=False, weather=False)  # laps=True„Åß„É©„ÉÉ„Éó„Éá„Éº„ÇøÂèñÂæó
        
        # ÂÖ®„É©„ÉÉ„Éó„Éá„Éº„Çø
        laps = session.laps
        
        # „Éâ„É©„Ç§„Éê„ÉºÊåáÂÆö„Åå„ÅÇ„ÇãÂ†¥Âêà„Éï„Ç£„É´„Çø„É™„É≥„Ç∞
        if drivers:
            laps = laps.pick_drivers(drivers)
            print(f"üìã ÂØæË±°„Éâ„É©„Ç§„Éê„Éº: {', '.join(drivers)}")
        else:
            # „Éá„Éï„Ç©„É´„Éà„Åß‰∏ä‰Ωç4„Éâ„É©„Ç§„Éê„Éº
            drivers = list(laps['Driver'].unique())[:4]
            laps = laps.pick_drivers(drivers)
            print(f"üìã Ëá™ÂãïÈÅ∏Êäû„Éâ„É©„Ç§„Éê„Éº: {', '.join(drivers)}")
        
        print(f"‚úÖ „Éá„Éº„ÇøÂèñÂæóÂÆå‰∫Ü: {len(laps)} „É©„ÉÉ„Éó, {len(drivers)} „Éâ„É©„Ç§„Éê„Éº")
        return session, laps, drivers
        
    except Exception as e:
        print(f"‚ùå „Çª„ÉÉ„Ç∑„Éß„É≥ÂèñÂæó„Ç®„É©„Éº: {e}")
        return None, None, None

# =============================================================================
# „Éâ„É©„Ç§„Éê„Éº„Éû„ÉÉ„Éî„É≥„Ç∞
# =============================================================================
DRIVER_MAPPING = {
    'VER': 'Max Verstappen', 'HAM': 'Lewis Hamilton', 'NOR': 'Lando Norris',
    'LEC': 'Charles Leclerc', 'PIA': 'Oscar Piastri', 'RUS': 'George Russell',
    'SAI': 'Carlos Sainz', 'PER': 'Sergio Perez', 'ALO': 'Fernando Alonso',
    'STR': 'Lance Stroll', 'TSU': 'Yuki Tsunoda', 'LAW': 'Alex Albon'
}

# =============================================================================
# „Ç∞„É©„Éï‰ΩúÊàê
# =============================================================================
def create_comparison_plots(session, laps, drivers, figsize=(16, 12)):
    """
    Ë§áÊï∞„Éâ„É©„Ç§„Éê„ÉºÊØîËºÉ„Ç∞„É©„Éï‰ΩúÊàê
    """
    session_name = f"{session.event['EventName']} {session.event.year} {session.name}"
    
    # „Çø„Ç§„É§„Ç≥„É≥„Éë„Ç¶„É≥„Éâ„ÅÆËâ≤Ë®≠ÂÆöÔºàF1ÂÖ¨Âºè„Ç´„É©„ÉºÔºâ
    compound_colors = {
        'SOFT': '#FF0000',      # Ëµ§
        'MEDIUM': '#FFFF00',    # ÈªÑËâ≤
        'HARD': '#FFFFFF',      # ÁôΩ
        'INTERMEDIATE': '#00FF00',  # Á∑ë
        'WET': '#00BFFF',       # Ê∞¥Ëâ≤
        'UNKNOWN': '#808080'    # „Ç∞„É¨„Éº
    }
    
    # „Éâ„É©„Ç§„Éê„Éº„Åî„Å®„ÅÆ„Ç´„É©„ÉºË®≠ÂÆö
    driver_colors = {
        'VER': '#FF2800', 'NOR': '#FF8C00', 'PIA': '#0066CC', 'RUS': '#00A3E0',
        'LEC': '#DC143C', 'HAM': '#00D2BE', 'SAI': '#FF1F37', 'PER': '#1A8BFF',
        'ALO': '#009E49', 'STR': '#005555', 'TSU': '#4463C7', 'LAW': '#FF8E00'
    }
    
    # „Ç≥„É≥„Éë„Ç¶„É≥„Éâ„Åî„Å®„ÅÆ„Éû„Éº„Ç´„Éº„Çπ„Çø„Ç§„É´
    compound_markers = {
        'SOFT': 'o', 'MEDIUM': 's', 'HARD': '^',
        'INTERMEDIATE': 'D', 'WET': 'p', 'UNKNOWN': 'x'
    }
    
    # Âõ≥„ÅÆ‰ΩúÊàê
    fig = plt.figure(figsize=figsize)
    gs = fig.add_gridspec(3, 2, height_ratios=[1, 1, 0.8], hspace=0.3, wspace=0.3)
    
    # „Ç∞„É©„Éï1: „É©„ÉÉ„Éó„Çø„Ç§„É†Êé®ÁßªÔºà„Ç≥„É≥„Éë„Ç¶„É≥„ÉâËâ≤ÂàÜ„ÅëÔºâ
    ax1 = fig.add_subplot(gs[0, :])
    handles1, labels1 = [], []
    
    for driver in drivers:
        driver_laps = laps[laps['Driver'] == driver].sort_values('LapNumber')
        
        # ÂêÑ„Éâ„É©„Ç§„Éê„Éº„ÅÆ„É©„ÉÉ„Éó„Çí„Éó„É≠„ÉÉ„Éà
        for compound in driver_laps['Compound'].unique():
            compound_laps = driver_laps[driver_laps['Compound'] == compound]
            if len(compound_laps) >= 1:  # 1„É©„ÉÉ„Éó‰ª•‰∏ä
                times_sec = compound_laps['LapTime'].dt.total_seconds()
                color = compound_colors.get(compound, '#808080')
                marker = compound_markers.get(compound, 'o')
                
                # „Éâ„É©„Ç§„Éê„ÉºÂõ∫Êúâ„ÅÆ„Ç®„ÉÉ„Ç∏„Ç´„É©„Éº
                edge_color = driver_colors.get(driver, '#000000')
                
                line, = ax1.plot(compound_laps['LapNumber'], times_sec, 
                               color=color, marker=marker, markersize=4, 
                               linewidth=2, markeredgecolor=edge_color, 
                               markeredgewidth=1, alpha=0.8,
                               label=f"{DRIVER_MAPPING.get(driver, driver)}-{compound}")
                
                if driver == drivers[0]:  # ÊúÄÂàù„ÅÆ„Éâ„É©„Ç§„Éê„Éº„Åß„É©„Éô„É´ËøΩÂä†
                    handles1.append(line)
                    labels1.append(f"{compound}")
    
    # Âπ≥Âùá„É©„ÉÉ„Éó„Çø„Ç§„É†„ÅÆÂü∫Ê∫ñÁ∑ö
    avg_time = laps['LapTime'].dt.total_seconds().mean()
    ax1.axhline(y=avg_time, color='black', linestyle='--', alpha=0.5, 
                label=f'Avg: {avg_time:.2f}s')
    
    ax1.set_xlabel('Lap Number')
    ax1.set_ylabel('Lap Time (seconds)')
    ax1.set_title(f'{session_name}\nLap Time Progression by Compound', fontsize=12, pad=20)
    ax1.legend(handles=handles1, labels=labels1, bbox_to_anchor=(1.05, 1), loc='upper left')
    ax1.grid(True, alpha=0.3)
    
    # YËª∏„ÅÆÁØÑÂõ≤Ë™øÊï¥ÔºàÊúÄÈÄü-ÊúÄÈÅÖ„ÅÆÁØÑÂõ≤„Å´Âèé„ÇÅ„ÇãÔºâ
    times = laps['LapTime'].dt.total_seconds()
    y_min, y_max = times.min() - 0.5, times.max() + 0.5
    ax1.set_ylim(y_min, y_max)
    
    # „Ç∞„É©„Éï2: „Ç≥„É≥„Éë„Ç¶„É≥„ÉâÂà•ÊúÄÈÄü„É©„ÉÉ„ÉóÊØîËºÉ
    ax2 = fig.add_subplot(gs[1, 0])
    fastest_per_compound = []
    
    for compound in compound_colors.keys():
        compound_laps = laps[laps['Compound'] == compound]
        if len(compound_laps) > 0:
            fastest_lap = compound_laps.loc[compound_laps['LapTime'].idxmin()]
            fastest_per_compound.append({
                'Compound': compound,
                'FastestTime': fastest_lap['LapTime'].total_seconds(),
                'Driver': fastest_lap['Driver'],
                'LapNumber': fastest_lap['LapNumber'],
                'Position': fastest_lap['Position']
            })
    
    if fastest_per_compound:
        fastest_df = pd.DataFrame(fastest_per_compound).sort_values('FastestTime')
        bars = ax2.bar(range(len(fastest_df)), fastest_df['FastestTime'], 
                      color=[compound_colors[c] for c in fastest_df['Compound']],
                      alpha=0.8, edgecolor='black', linewidth=0.5)
        
        # ÂêÑ„Éê„Éº„ÅÆ‰∏ä„Å´„Éâ„É©„Ç§„Éê„ÉºÂêç„Å®„É©„ÉÉ„ÉóÁï™Âè∑„ÇíË°®Á§∫
        for i, bar in enumerate(bars):
            height = bar.get_height()
            driver_name = DRIVER_MAPPING.get(fastest_df.iloc[i]['Driver'], 
                                           fastest_df.iloc[i]['Driver'])
            ax2.text(bar.get_x() + bar.get_width()/2., height + 0.1,
                    f"{driver_name}\nLap {fastest_df.iloc[i]['LapNumber']}",
                    ha='center', va='bottom', fontsize=8, fontweight='bold')
        
        ax2.set_ylabel('Fastest Lap Time (seconds)')
        ax2.set_title('Fastest Lap by Compound')
        ax2.set_xticks(range(len(fastest_df)))
        ax2.set_xticklabels([c[:3] for c in fastest_df['Compound']], rotation=45)
        ax2.grid(True, alpha=0.3, axis='y')
        
        # ÊúÄÂ∞èÂÄ§„ÅÆ„É©„Ç§„É≥
        ax2.axhline(y=fastest_df['FastestTime'].min(), color='red', 
                   linestyle='-', alpha=0.7, linewidth=1)
    
    # „Ç∞„É©„Éï3: „Éâ„É©„Ç§„Éê„ÉºÂà•Âπ≥Âùá„É©„ÉÉ„Éó„Çø„Ç§„É†
    ax3 = fig.add_subplot(gs[1, 1])
    driver_stats = []
    
    for driver in drivers:
        driver_laps = laps[laps['Driver'] == driver]
        if len(driver_laps) > 0:
            avg_time = driver_laps['LapTime'].mean().total_seconds()
            std_time = driver_laps['LapTime'].std().total_seconds()
            lap_count = len(driver_laps)
            
            driver_stats.append({
                'Driver': driver,
                'AvgTime': avg_time,
                'StdTime': std_time,
                'LapCount': lap_count
            })
    
    if driver_stats:
        stats_df = pd.DataFrame(driver_stats)
        x_pos = np.arange(len(drivers))
        width = 0.35
        
        bars = ax3.bar(x_pos, stats_df['AvgTime'], 
                      yerr=stats_df['StdTime'], capsize=5, 
                      color=[driver_colors[d] for d in stats_df['Driver']],
                      alpha=0.8, edgecolor='black', linewidth=0.5)
        
        # ÂêÑ„Éê„Éº„ÅÆ‰∏ä„Å´„É©„ÉÉ„ÉóÊï∞„Å®Âπ≥Âùá„Çø„Ç§„É†„ÇíË°®Á§∫
        for i, bar in enumerate(bars):
            height = bar.get_height()
            driver_name = DRIVER_MAPPING.get(stats_df.iloc[i]['Driver'], 
                                           stats_df.iloc[i]['Driver'])
            ax3.text(bar.get_x() + bar.get_width()/2., height + stats_df.iloc[i]['StdTime'] + 0.1,
                    f"{driver_name}\n{stats_df.iloc[i]['LapCount']} laps\n{stats_df.iloc[i]['AvgTime']:.2f}s",
                    ha='center', va='bottom', fontsize=8, fontweight='bold')
        
        ax3.set_ylabel('Average Lap Time (seconds)')
        ax3.set_title('Driver Performance Summary')
        ax3.set_xticks(x_pos)
        ax3.set_xticklabels([DRIVER_MAPPING.get(d, d) for d in drivers], rotation=45)
        ax3.grid(True, alpha=0.3, axis='y')
    
    # „Ç∞„É©„Éï4: „Çø„Ç§„É§‰ΩøÁî®Áµ±Ë®à„ÉÜ„Éº„Éñ„É´
    ax4 = fig.add_subplot(gs[2, :])
    ax4.axis('tight')
    ax4.axis('off')
    
    # Áµ±Ë®à„ÉÜ„Éº„Éñ„É´‰ΩúÊàê
    table_data = []
    headers = ['Driver', 'SOFT', 'MEDIUM', 'HARD', 'Total', 'Fastest Lap']
    
    for driver in drivers:
        driver_laps = laps[laps['Driver'] == driver]
        row = [DRIVER_MAPPING.get(driver, driver)]
        
        # „Ç≥„É≥„Éë„Ç¶„É≥„ÉâÂà•„É©„ÉÉ„ÉóÊï∞
        for compound in ['SOFT', 'MEDIUM', 'HARD']:
            count = len(driver_laps[driver_laps['Compound'] == compound])
            row.append(str(count) if count > 0 else '-')
        
        total_laps = len(driver_laps)
        row.append(str(total_laps))
        
        # ÊúÄÈÄü„É©„ÉÉ„Éó
        if total_laps > 0:
            fastest = driver_laps.loc[driver_laps['LapTime'].idxmin()]
            fastest_time = fastest['LapTime'].total_seconds()
            fastest_compound = fastest['Compound']
            row.append(f"{fastest_time:.2f}s ({fastest_compound})")
        else:
            row.append('-')
        
        table_data.append(row)
    
    # „ÉÜ„Éº„Éñ„É´ÊèèÁîª
    table = ax4.table(cellText=table_data, colLabels=headers, 
                     cellLoc='center', loc='center', colWidths=[0.15, 0.1, 0.1, 0.1, 0.1, 0.25])
    table.auto_set_font_size(False)
    table.set_fontsize(9)
    table.scale(1, 2)
    
    # „Éò„ÉÉ„ÉÄ„ÉºË°å„ÅÆ„Çπ„Çø„Ç§„É´
    for i in range(len(headers)):
        table[(0, i)].set_facecolor('#40466e')
        table[(0, i)].set_text_props(weight='bold', color='white')
        table[(0, i)].set_height(0.1)
    
    # „Éâ„É©„Ç§„Éê„ÉºË°å„ÅÆ‰∫§‰∫íËâ≤
    for i in range(1, len(table_data) + 1):
        for j in range(len(headers)):
            if i % 2 == 0:
                table[(i, j)].set_facecolor('#f0f0f0')
    
    ax4.set_title('Tire Compound Usage Summary', fontsize=12, pad=20)
    
    # ÂÖ®‰Ωì„Çø„Ç§„Éà„É´
    plt.suptitle(f'{session_name} - Multiple Driver & Compound Analysis', 
                fontsize=16, y=0.95)
    
    plt.tight_layout()
    plt.show()
    
    return fig

# =============================================================================
# Áµ±Ë®àË°®Á§∫
# =============================================================================
def print_session_stats(session, laps, drivers):
    """„Çª„ÉÉ„Ç∑„Éß„É≥Áµ±Ë®à„ÇíË°®Á§∫"""
    print("\n" + "="*60)
    print(f"üìä {session.event['EventName']} {session.event.year} {session.name} ÂàÜÊûêÁµêÊûú")
    print("="*60)
    
    # ÂÖ®‰ΩìÁµ±Ë®à
    total_laps = len(laps)
    unique_compounds = laps['Compound'].unique()
    avg_lap_time = laps['LapTime'].mean().total_seconds()
    
    print(f"üìà Á∑è„É©„ÉÉ„ÉóÊï∞: {total_laps}")
    print(f"üî¥ ‰ΩøÁî®„Ç≥„É≥„Éë„Ç¶„É≥„Éâ: {', '.join(unique_compounds)}")
    print(f"‚è±Ô∏è  Âπ≥Âùá„É©„ÉÉ„Éó„Çø„Ç§„É†: {avg_lap_time:.2f}Áßí")
    
    # „Éâ„É©„Ç§„Éê„ÉºÂà•Áµ±Ë®à
    print(f"\nüë®‚Äçüíº „Éâ„É©„Ç§„Éê„ÉºÂà•Áµ±Ë®à:")
    print("-" * 40)
    driver_stats = []
    
    for driver in drivers:
        driver_laps = laps[laps['Driver'] == driver]
        if len(driver_laps) > 0:
            avg_time = driver_laps['LapTime'].mean().total_seconds()
            best_time = driver_laps['LapTime'].min().total_seconds()
            lap_count = len(driver_laps)
            best_compound = driver_laps.loc[driver_laps['LapTime'].idxmin()]['Compound']
            
            driver_stats.append({
                'Driver': DRIVER_MAPPING.get(driver, driver),
                'Laps': lap_count,
                'Avg': f"{avg_time:.2f}s",
                'Best': f"{best_time:.2f}s",
                'BestTire': best_compound
            })
    
    # Áµ±Ë®à„ÉÜ„Éº„Éñ„É´Ë°®Á§∫
    print(f"{'„Éâ„É©„Ç§„Éê„Éº':<15} {'„É©„ÉÉ„Éó':<6} {'Âπ≥Âùá':<8} {'ÊúÄÈÄü':<8} {'ÊúÄÈÄü„Çø„Ç§„É§':<10}")
    print("-" * 50)
    for stat in driver_stats:
        print(f"{stat['Driver']:<15} {stat['Laps']:<6} {stat['Avg']:<8} {stat['Best']:<8} {stat['BestTire']:<10}")
    
    # „Ç≥„É≥„Éë„Ç¶„É≥„ÉâÁµ±Ë®à
    print(f"\nüõû „Ç≥„É≥„Éë„Ç¶„É≥„ÉâÂà•Áµ±Ë®à:")
    print("-" * 40)
    compound_stats = laps.groupby('Compound').agg({
        'LapTime': ['count', 'mean', 'min'],
        'Driver': 'nunique'
    }).round(2)
    
    compound_stats.columns = ['„É©„ÉÉ„ÉóÊï∞', 'Âπ≥Âùá„Çø„Ç§„É†', 'ÊúÄÈÄü„Çø„Ç§„É†', '„Éâ„É©„Ç§„Éê„ÉºÊï∞']
    compound_stats['Âπ≥Âùá„Çø„Ç§„É†'] = compound_stats['Âπ≥Âùá„Çø„Ç§„É†'].apply(lambda x: f"{x:.2f}s")
    compound_stats['ÊúÄÈÄü„Çø„Ç§„É†'] = compound_stats['ÊúÄÈÄü„Çø„Ç§„É†'].apply(lambda x: f"{x:.2f}s")
    
    print(compound_stats[['„É©„ÉÉ„ÉóÊï∞', 'Âπ≥Âùá„Çø„Ç§„É†', 'ÊúÄÈÄü„Çø„Ç§„É†', '„Éâ„É©„Ç§„Éê„ÉºÊï∞']])

# =============================================================================
# „É°„Ç§„É≥ÂÆüË°åÈñ¢Êï∞
# =============================================================================
def main():
    """„É°„Ç§„É≥ÂÆüË°åÈñ¢Êï∞"""
    print("üèéÔ∏è  FastF1 Ë§áÊï∞„Éâ„É©„Ç§„Éê„ÉºÊØîËºÉÂàÜÊûê„ÉÑ„Éº„É´")
    print("="*50)
    
    # „Ç≠„É£„ÉÉ„Ç∑„É•Ë®≠ÂÆö
    setup_cache()
    
    # „Çª„ÉÉ„Ç∑„Éß„É≥Ë®≠ÂÆöÔºà‰æãÔºâ
    YEAR = 2024
    EVENT = 'Silverstone'  # „Ç§„ÇÆ„É™„ÇπGP
    SESSION_TYPE = 'R'     # Ê±∫Âãù
    
    # ÂàÜÊûêÂØæË±°„Éâ„É©„Ç§„Éê„ÉºÔºàÂ§âÊõ¥ÂèØËÉΩÔºâ
    TARGET_DRIVERS = ['VER', 'NOR', 'PIA', 'RUS']  # Verstappen, Norris, Piastri, Russell
    
    # „Éá„Éº„ÇøÂèñÂæó
    session, laps, drivers = get_session_data(YEAR, EVENT, SESSION_TYPE, TARGET_DRIVERS)
    
    if session is None or laps is None:
        print("‚ùå „Éá„Éº„ÇøÂèñÂæó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇ")
        return
    
    # Áµ±Ë®àË°®Á§∫
    print_session_stats(session, laps, drivers)
    
    # „Ç∞„É©„Éï‰ΩúÊàê
    print(f"\nüìà „Ç∞„É©„Éï‰ΩúÊàê‰∏≠...")
    fig = create_comparison_plots(session, laps, drivers)
    
    print("‚úÖ ÂàÜÊûêÂÆå‰∫ÜÔºÅ")
    
    # „Ç∞„É©„Éï‰øùÂ≠òÔºà„Ç™„Éó„Ç∑„Éß„É≥Ôºâ
    save_path = f"{EVENT}_{YEAR}_{SESSION_TYPE}_analysis.png"
    fig.savefig(save_path, dpi=300, bbox_inches='tight')
    print(f"üíæ „Ç∞„É©„Éï‰øùÂ≠ò: {save_path}")

# =============================================================================
# ÂÆüË°å
# =============================================================================
if __name__ == "__main__":
    main()